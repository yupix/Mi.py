{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Name '__path__' can be undefined",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/__init__.py",
      "language": "Python",
      "line": 9,
      "offset": 46,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 68,
        "surroundingCode": "__version__ = \"3.9.9\"\n\n__path__ = __import__(\"pkgutil\").extend_path(__path__, __name__)\n\nimport mi.ext"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "a2b93838d6b7533b1d06e18d11cf4264a35cea0e24c7a6bcfe33b8373d757473"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Improper first parameter",
  "severity": "Moderate",
  "comment": "Usually first parameter of such methods is named 'mcs'",
  "detailsInfo": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 16,
      "offset": 17,
      "length": 3,
      "code": {
        "startLine": 14,
        "length": 3,
        "offset": 39,
        "surroundingCode": "    __cog_name__: str\n\n    def __new__(cls, *args: Tuple[Any], **kwargs: Dict[str, Any]):\n        name, bases, attrs = args\n        attrs['__cog_name__'] = kwargs.pop(\"name\", name)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodParametersInspection"
  },
  "hash": "0bfeafac8d740d28dd3f10d9d52045e8a364d4ee14e0cb5bf47e37c1043fe798"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Improper first parameter",
  "severity": "Moderate",
  "comment": "Usually first parameter of such methods is named 'cls'",
  "detailsInfo": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 60,
      "offset": 18,
      "length": 4,
      "code": {
        "startLine": 58,
        "length": 4,
        "offset": 41,
        "surroundingCode": "        return new_cls\n\n    def __init__(self, *args: Tuple[Any], **kwargs: Dict[str, Any]):\n        super().__init__(*args, **kwargs)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodParametersInspection"
  },
  "hash": "2094f3af9bfd66fa9754e173a5fbece5e90fdbe4532504d187762493e86c0529"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Improper first parameter",
  "severity": "Moderate",
  "comment": "Usually first parameter of such methods is named 'mcs'",
  "detailsInfo": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 64,
      "offset": 24,
      "length": 3,
      "code": {
        "startLine": 62,
        "length": 3,
        "offset": 41,
        "surroundingCode": "\n    @classmethod\n    def qualified_name(cls) -> str:\n        return cls.__cog_name__\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodParametersInspection"
  },
  "hash": "dfe7bbef84dd4138dd3a54ad569000735c3b457e054a7c1335845270bcc72b4b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/bot.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2079,
      "code": {
        "startLine": 1,
        "length": 2079,
        "offset": 0,
        "surroundingCode": "import asyncio\nfrom abc import abstractmethod\nfrom types import ModuleType"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "b705843818de37ec91290a668117d50337b8d94fb471f98df9acac149a703e3c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 19,
      "code": {
        "startLine": 1,
        "length": 19,
        "offset": 0,
        "surroundingCode": "from .bot import *\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "5033754b0d49ff970205bad4266193c18c57f26de42e587841e8aa6df86b0d1d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/chat.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 242,
      "code": {
        "startLine": 1,
        "length": 242,
        "offset": 0,
        "surroundingCode": "from abc import ABC, abstractmethod\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "92abaf20cdaca6c493269b806864501f3ab96849853efb22c43d74ab908c4c3c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 246,
      "code": {
        "startLine": 1,
        "length": 246,
        "offset": 0,
        "surroundingCode": "from abc import ABC, abstractmethod\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "b8fda9349039dc9b8ef9a6eef4bea670f5831b90042a388991944a8bfb0bd86b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 59,
      "code": {
        "startLine": 1,
        "length": 59,
        "offset": 0,
        "surroundingCode": "from .chat import *\nfrom .ext import *\nfrom .note import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "2fe5ad4e1df637d5f629205245baf97fd0f3aeb0e34d0112f40d4fff2732552a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/tasks/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1764,
      "code": {
        "startLine": 1,
        "length": 1764,
        "offset": 0,
        "surroundingCode": "import asyncio\nfrom typing import Any, Callable, Coroutine, Dict, Optional\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "949712ed0028ade8c42845fcdd8eae71ee44bae345d83baac7829c489d23ac93"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 8277,
      "code": {
        "startLine": 1,
        "length": 8277,
        "offset": 0,
        "surroundingCode": "\"\"\"Commands FrameWork用のCore部分\"\"\"\n\nfrom __future__ import annotations"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "c79e1772d27f9899dce5e74e1d162ae45c507b38a428379c1d980d6868541f63"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3862,
      "code": {
        "startLine": 1,
        "length": 3862,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport inspect"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "3841d9e86061cd36bc213834392a50da4503afd649afb5bbae6aadeb1666ff1e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2252,
      "code": {
        "startLine": 1,
        "length": 2252,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport asyncio"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "06c26a8878bb80d412f93462643ff3cf3a71facfd852edeb5c5fdc30518f8072"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/_types.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 39,
      "code": {
        "startLine": 1,
        "length": 39,
        "offset": 0,
        "surroundingCode": "class _BaseCommand:\n    __slots__ = ()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "05c6cd7aeffd753a6bac5118f10a0381c59491a34832a552a412d17fb47a480f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/context.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 960,
      "code": {
        "startLine": 1,
        "length": 960,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "cb58db47df07a8d0738adbd5d95e937268e205b5e8ec481422bc372172242901"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 81,
      "code": {
        "startLine": 1,
        "length": 81,
        "offset": 0,
        "surroundingCode": "from .bot import *\nfrom .cog import *\nfrom .context import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "f30319b69a532ca0f185cbb41e0ced82aea10e7efd4b8b2fec89f2edd3477ee7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 45,
      "code": {
        "startLine": 1,
        "length": 45,
        "offset": 0,
        "surroundingCode": "from .commands import *\nfrom .tasks import *\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "b59cb38d9d5c9463bb5aa7b4a6caf801edb4c0288c0a8e2b6b6957629addbd95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/bot.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 396,
      "code": {
        "startLine": 1,
        "length": 396,
        "offset": 0,
        "surroundingCode": "from abc import ABC, abstractmethod\nfrom typing import Any, Dict, Optional\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "e1a7552ed2559873f6e442bff47950145be8bf132641c23821e9c0b79d918228"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/chat.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 301,
      "code": {
        "startLine": 1,
        "length": 301,
        "offset": 0,
        "surroundingCode": "from typing import List, TypedDict\n\nfrom mi.types.user import UserPayload"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d2a11a21da946992b314279b12fdf85163bd4402ba3236f68315dba79d01b0a7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2242,
      "code": {
        "startLine": 1,
        "length": 2242,
        "offset": 0,
        "surroundingCode": "from typing import Any, Dict, List, Optional, TypedDict\n\nfrom .drive import FilePayload"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "1c015927b3d88b8b7ad8b0c39f857047e026098a64beda5fd1175b8680c362d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/user.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2786,
      "code": {
        "startLine": 1,
        "length": 2786,
        "offset": 0,
        "surroundingCode": "from typing import Any, Dict, List, Optional, TypedDict\n\nfrom .drive import FilePayload"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "1c961a00fee4e75f5f2dc924b953e98d201d2438b2cb0aecac44cc9b83fe2a14"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/util.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 253,
      "code": {
        "startLine": 1,
        "length": 253,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\nfrom typing import Optional, TYPE_CHECKING, TypedDict\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "525d269377d0ef1b4740e452a66a2f2fe49e9e0ee67616d2702ec0e8059050e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/chart.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1003,
      "code": {
        "startLine": 1,
        "length": 1003,
        "offset": 0,
        "surroundingCode": "__all__ = ('ActiveUsersChartPayload', 'DriveLocalChartPayload', 'DriveRemoteChartPayload', 'DriveChartPayload')\n\nfrom typing import List, TypedDict, Union"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "604d0c380606ef830a17e80ddf7f132d1401e0e8d069cd5706111f9ddc8bbed9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/drive.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 740,
      "code": {
        "startLine": 1,
        "length": 740,
        "offset": 0,
        "surroundingCode": "from typing import Any, Dict, Optional, TypedDict\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "dc9ee65c7183e415ffc9a1e5200c618cd108fc6bb1b2d2712295274a1c4089b9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/emoji.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 232,
      "code": {
        "startLine": 1,
        "length": 232,
        "offset": 0,
        "surroundingCode": "from typing import List, Optional, TypedDict\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "c9608ca2b8cce9677db9fa263f88667ec4710ac59a2a35c8203848ebcb78c188"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 429,
      "code": {
        "startLine": 1,
        "length": 429,
        "offset": 0,
        "surroundingCode": "\"\"\"\nmi.types\n\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "45976ddb6f22103de0ca2552865c3cf5280bf7509ecb64f186575da5d0f22fdb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/instance.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1832,
      "code": {
        "startLine": 1,
        "length": 1832,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, Optional, TYPE_CHECKING, TypedDict"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "23fc431c3ea0b3344b6473edfee7535513b84ead166f7c8d2834356f60d1139f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/reaction.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 171,
      "code": {
        "startLine": 1,
        "length": 171,
        "offset": 0,
        "surroundingCode": "from typing import TypedDict\n\nfrom mi.types import UserPayload"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "544c406fff199b25875e004659656557a2e4c13ccdc48601e7dbcc7a56802e78"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 9097,
      "code": {
        "startLine": 1,
        "length": 9097,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, Optional"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "58eb421485178f3597fbff28387d8f047b46ba7fc34a55008990706116d13919"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/user.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 5172,
      "code": {
        "startLine": 1,
        "length": 5172,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, Optional, TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d2b05740eff45cbf62d6288c448c4181e10c704fe11aec11a72f02fc102285c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/admin.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 775,
      "code": {
        "startLine": 1,
        "length": 775,
        "offset": 0,
        "surroundingCode": "from typing import Optional\n\nfrom mi.framework.http import HTTPSession, Route"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "cc467cb25a5696ac7b41cd39a637d294c81418c62ccc1e5a6824246f3e6b38cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/drive.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 740,
      "code": {
        "startLine": 1,
        "length": 740,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import Optional, TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "6d67c1a9ca8c744e17fc0624b55a6c95f9ec67d1cead2208c08cfa39636331a2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 82,
      "code": {
        "startLine": 1,
        "length": 82,
        "offset": 0,
        "surroundingCode": "from .admin import *\nfrom .drive import *\nfrom .note import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "22e8e03054cc0187dae383796efe8aeb7e374f53d22bc67c19cd41fe147604fa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/ad.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 601,
      "code": {
        "startLine": 1,
        "length": 601,
        "offset": 0,
        "surroundingCode": "from mi.framework.http import HTTPSession, Route\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "099ebe626281fb1982d1e7609ac13c8a2dab136dbd02dbeb93e08962d5bf0055"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/chat.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1459,
      "code": {
        "startLine": 1,
        "length": 1459,
        "offset": 0,
        "surroundingCode": "from datetime import datetime\nfrom typing import List\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "6af5453ff8c6d90eb5c594515dc2ec05fe7f3199cb3804eecd27cd1ec3d19b71"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 6248,
      "code": {
        "startLine": 1,
        "length": 6248,
        "offset": 0,
        "surroundingCode": "from datetime import datetime\nfrom typing import Any, Dict, List, Optional\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "fa4eafb7b048bbee3f8e40f1f97dd101d998042de7c5974113331e32064b1a26"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/poll.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1199,
      "code": {
        "startLine": 1,
        "length": 1199,
        "offset": 0,
        "surroundingCode": "from typing import List, Optional\n\nfrom mi.types.note import PollPayload"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "7b5abc6e9381c67633d0fb8f1c0083d39b458d98a8e0cd399f77c415643499cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/user.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 5500,
      "code": {
        "startLine": 1,
        "length": 5500,
        "offset": 0,
        "surroundingCode": "from datetime import datetime\nfrom typing import List, Optional\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "439ba3f48b2a3c2464d57ba45877caec0d651fa3422d3f1a64fbf356129e3c74"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/chart.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2632,
      "code": {
        "startLine": 1,
        "length": 2632,
        "offset": 0,
        "surroundingCode": "__all__ = ('RawActiveUsersChart', 'RawDriveRemoteChart', 'RawDriveLocalChart','RawDriveChart')\n\nfrom typing import List"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "0290b69b7625a1997d5efaad2f5bc2ed31bedba97c7f30d486656de9ff54ef16"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/drive.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3250,
      "code": {
        "startLine": 1,
        "length": 3250,
        "offset": 0,
        "surroundingCode": "from datetime import datetime\nfrom typing import Any, Dict, Optional\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "259e1ac22af9476f9fb8972a87f63c851d809583f60288a00c4349370090dc2c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/emoji.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 837,
      "code": {
        "startLine": 1,
        "length": 837,
        "offset": 0,
        "surroundingCode": "from typing import List, Optional\n\nfrom mi.types.emoji import EmojiPayload"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "01649ff11fabdd8ffad7820d4f315a9860e3599ca0b72371bb3d91bd85416429"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 380,
      "code": {
        "startLine": 1,
        "length": 380,
        "offset": 0,
        "surroundingCode": "from .chat import *\nfrom .drive import *\nfrom .emoji import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "9cbec4e9859c5e5105df4da60f4b997c8aaa9065f0f6681807ad0769ef1bf692"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/instance.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1078,
      "code": {
        "startLine": 1,
        "length": 1078,
        "offset": 0,
        "surroundingCode": "from typing import Optional\n\n__all__ = ['RawInstance']"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "e4e66466a87ea1167b48352504f785db84504ee0a6aea0c1e44b5d214c94ad58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/reaction.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 691,
      "code": {
        "startLine": 1,
        "length": 691,
        "offset": 0,
        "surroundingCode": "from datetime import datetime\n\nfrom mi.types import UserPayload"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "6af26e496b37adb07ec080256e0731cd14ef580f6530b782dc1246f00678d51e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/chat.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1761,
      "code": {
        "startLine": 1,
        "length": 1761,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import Optional"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "3f099dd5df289934ccfc93a934ff41db481099671874fc29e54721a4f44e0f6b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 821,
      "code": {
        "startLine": 1,
        "length": 821,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import Optional"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "b10c59d52543999fa7c1aa63b094d79d040b77c76c9dc1c997c3e28de63113ed"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/user.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1905,
      "code": {
        "startLine": 1,
        "length": 1905,
        "offset": 0,
        "surroundingCode": "from typing import Optional\n\nfrom mi import config"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "12df96df69a45ef3df75b66d97f0a6bab88aba6adf0bf4ddd314ff636b6ebd82"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/chart.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 935,
      "code": {
        "startLine": 1,
        "length": 935,
        "offset": 0,
        "surroundingCode": "__all__ = ('ChartManager',)\n\nfrom mi.framework.http import HTTPSession, Route"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "bea249cb99e4a021d599011ba26b258f136d14f5a2344f214b9a0dcdcdaa80f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/drive.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 5923,
      "code": {
        "startLine": 1,
        "length": 5923,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, Optional"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "342e77633a0c6fd7618af8b536e6ee46328fa0cf0a0d3dc8a28284e39a712ef2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/emoji.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1423,
      "code": {
        "startLine": 1,
        "length": 1423,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, Optional"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "187f2adc5c53ca8a9227b53c6b258313819e7b01575bb1a43fc622ad8ac699d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/follow.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2930,
      "code": {
        "startLine": 1,
        "length": 2930,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, Optional"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "c1314883d29f369a52850a810353e87db002ca4c9bd644c7055c4a46be9d045d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 68,
      "code": {
        "startLine": 1,
        "length": 68,
        "offset": 0,
        "surroundingCode": "from .favorite import *\nfrom .follow import *\nfrom .models import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "75513ceef5ca84141b54b3f3580cac162b2ce8d9f1c84a9b0a994cb7034aad5f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/favorite.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 748,
      "code": {
        "startLine": 1,
        "length": 748,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import Optional"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "9ac45cabac6e658ef275c09fbced206794d52475bdad931bbd2dc479e53d26c0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/reaction.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2107,
      "code": {
        "startLine": 1,
        "length": 2107,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, Optional"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "9945ac48d2b043e797de8caed9b31f0f0fa14877c278b800113cd4eecb9ef41f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/moderator.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 780,
      "code": {
        "startLine": 1,
        "length": 780,
        "offset": 0,
        "surroundingCode": "from typing import Optional\n\nfrom mi.framework.http import HTTPSession, Route"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "e1b11ba4f9fc522ecb0b7a6d62b509ca043038fc11615f2315e2e2b0dc69aba5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/utils.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 6787,
      "code": {
        "startLine": 1,
        "length": 6787,
        "offset": 0,
        "surroundingCode": "\"\"\"\nMi.pyを使用する上でちょっとした際に便利なツール一覧\n\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "6c9f5a334d9f0a06a784ee0666f22bbba83f9a8de1e0820a1d502ee1419bcc13"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/config.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 517,
      "code": {
        "startLine": 1,
        "length": 517,
        "offset": 0,
        "surroundingCode": "from typing import Any, Optional\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "007bc9df13f27abdb4a617fcea8a39ca0c9fd3b6a13e6e4084b851e06ccf8f74"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/chat.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1447,
      "code": {
        "startLine": 1,
        "length": 1447,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom mi.abc.chat import AbstractChatContent"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "9a2558cb776233e66a971863c1392a94563b6474ead90861da1b8c5619b4c980"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 10729,
      "code": {
        "startLine": 1,
        "length": 10729,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom datetime import datetime"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "b55f6d2926611f520e88eaf14be6ea2c44a80ccb2dc5919a986a2ef9d7f89405"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/user.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 10043,
      "code": {
        "startLine": 1,
        "length": 10043,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom datetime import datetime"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "2e6adb91c40a8ac99cf51f4b529165ea47568688ed0e34ad835a5a263b54e0d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/chart.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 580,
      "code": {
        "startLine": 1,
        "length": 580,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, Optional"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "283990535adcff623ea629c05ec564d006ca84d3c59b2c4ad0c9aa165c30bb1e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/drive.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2807,
      "code": {
        "startLine": 1,
        "length": 2807,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Union"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "249a01d455c15785172d900bc14cd0c09de78dbebd33f4d41dc8a7cab652296a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/emoji.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 754,
      "code": {
        "startLine": 1,
        "length": 754,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport mi.framework.manager"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "dd3195cdb58b35ebe1cf610d7eeb2e6d2b3f891f45e69e7d0b5c6efbe1d2acf7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 147,
      "code": {
        "startLine": 1,
        "length": 147,
        "offset": 0,
        "surroundingCode": "from .chart import *\nfrom .chat import *\nfrom .drive import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d96d8f365699dedc1e45c5d53b5cd9f299f5b754e9b32c1ce7be9639a55766ec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/instance.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 4757,
      "code": {
        "startLine": 1,
        "length": 4757,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import AsyncIterator, Dict, List, Optional, TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "0442680e7bacd6e55be6107dcd4d4fa20f21686743fac8860777232a165f757a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/http.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 4138,
      "code": {
        "startLine": 1,
        "length": 4138,
        "offset": 0,
        "surroundingCode": "\"\"\"Mi.pyのWebSocket部分\"\"\"\n\nimport json"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "2619c37b6f0b145bc3c0d7ca36e742ce8e203ad3a8b06d232985d6ba611091a9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/state.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 5740,
      "code": {
        "startLine": 1,
        "length": 5740,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport asyncio"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "40ec77e6f3753f8bd1467d0a55b861cff1deb48e17f786b59609a8ce121c3bd2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/client.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 10046,
      "code": {
        "startLine": 1,
        "length": 10046,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport asyncio"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d0c0ca2990fc2cb2485b5dc4441ddf37e13323528a80ab23c35b264c7183393e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/router.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2259,
      "code": {
        "startLine": 1,
        "length": 2259,
        "offset": 0,
        "surroundingCode": "\"\"\"Misskeyのチャンネルへの接続や、メッセージのキャプチャ等のWebSocket関連\"\"\"\n\nfrom __future__ import annotations"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "cb18721c89fe39ab885b2bd6cd5acd1273a29e507d2d48966e8ab09338031f44"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/gateway.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1688,
      "code": {
        "startLine": 1,
        "length": 1688,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport json"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "9216de6c0cd578e2f37c9a8ba1b990d15d3579476be57057fda0f80ddb2a700b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/manager.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1224,
      "code": {
        "startLine": 1,
        "length": 1224,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import Optional, TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "8a7b5478ab07c6ad83a4f5337d9123b4c975b3031e66408672437e81b73c452b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 144,
      "code": {
        "startLine": 1,
        "length": 144,
        "offset": 0,
        "surroundingCode": "import mi.framework.http\nimport mi.framework.router\nfrom .client import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "72a3a8aabf4039f243bb192c2e558b1b7b31db94ac77b6a19da9c328b2dd7e57"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/iterators.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2137,
      "code": {
        "startLine": 1,
        "length": 2137,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import Generator, Optional, TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "c2764849dd0708bb0bf714a1be26ec3f1be605758f6a054593efd66b99130dbc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 423,
      "code": {
        "startLine": 1,
        "length": 423,
        "offset": 0,
        "surroundingCode": "__title__ = \"misskey\"\n__author__ = \"yupix\"\n__license__ = \"MIT\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "caab5e8c9758fbd33ff50f3f270d441520ccf92f97727c24e1279193105d6332"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/exception.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2252,
      "code": {
        "startLine": 1,
        "length": 2252,
        "offset": 0,
        "surroundingCode": "__all__ = (\n    \"CogNameDuplicate\",\n    \"CredentialRequired\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "4f181b6e74841947b8906d36653915c5d77bf8add8fb2a401de0608f23abd1e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/next_utils.pyx",
      "language": "Cython",
      "line": 1,
      "offset": 1,
      "length": 322,
      "code": {
        "startLine": 1,
        "length": 322,
        "offset": 0,
        "surroundingCode": "import cython\n\n@cython.boundscheck(False)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d6a046d0544980d4694045eae3fb3e964eed89d2ba663696026fdd0efaf4b13b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "docs/conf.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3193,
      "code": {
        "startLine": 1,
        "length": 3193,
        "offset": 0,
        "surroundingCode": "# Configuration file for the Sphinx documentation builder.\n#\n# This file only contains a selection of the most common options. For a full"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "65a0af7a759dd7e8517f64710620aa08080bcd8756ea2a24a7267fc8999f33a9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 8408,
      "code": {
        "startLine": 1,
        "length": 8408,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport importlib"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "9934ba4cabfc5b37bbc9bdbc7aff84dd8adf6907a0bee890a8c3557af5ff6afa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "examples/use_class.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1202,
      "code": {
        "startLine": 1,
        "length": 1202,
        "offset": 0,
        "surroundingCode": "import asyncio\n\nfrom mi.ext import commands, tasks"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "2ee89a265864bd09129f8ea31c94c08ab3e7fc1f68d80bad4d560a70c5484d37"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "examples/use_instance.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 889,
      "code": {
        "startLine": 1,
        "length": 889,
        "offset": 0,
        "surroundingCode": "import asyncio\n\nfrom mi import Client, Note, Router"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "6585b83670bafea7540a4ae3cc0d31ac2619d97ee184c49f8e462f4d8e9e6e2f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "setup.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1506,
      "code": {
        "startLine": 1,
        "length": 1506,
        "offset": 0,
        "surroundingCode": "import pathlib\n\nfrom setuptools import Extension, setup"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "86a74e5adf0579e0a549dc17d4c1515ec33cc490be4f56b751d426a1b0024e99"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "requirements.txt",
      "language": "TEXT",
      "line": 1,
      "offset": 1,
      "length": 30,
      "code": {
        "startLine": 1,
        "length": 30,
        "offset": 0,
        "surroundingCode": "aiocache\naiohttp\nemoji"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "7bdf580f5c502e422644fafd0c5291504d69dead33397737a8392c214a35802b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter note_id in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/note.py",
      "language": "Python",
      "line": 22,
      "offset": 45,
      "length": 29,
      "code": {
        "startLine": 20,
        "length": 29,
        "offset": 102,
        "surroundingCode": "        self.reaction = ReactionManager(note_id=note_id)\n\n    async def add_clips(self, clip_id: str, note_id: Optional[str] = None) -> bool:\n        \"\"\"\n        クリップに追加します"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "839414b63f4220fb98856807ea414e36da05c0550c6a553bc452375e312447cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Unexpected parameter 追加したいノートのID in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/note.py",
      "language": "Python",
      "line": 31,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 29,
        "length": 11,
        "offset": 76,
        "surroundingCode": "            クリップのID\n        note_id Optional[str], default=None\n            追加したいノートのID\n\n        Returns"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "ac88d0c977bc5051c5c6d289d46f946ea314ea2fa70e8a3f95d10ba6f7847fda"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect docstring",
  "severity": "Moderate",
  "comment": "Missing parameter is_ayuskey in docstring",
  "detailsInfo": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/client.py",
      "language": "Python",
      "line": 270,
      "offset": 21,
      "length": 24,
      "code": {
        "startLine": 268,
        "length": 24,
        "offset": 136,
        "surroundingCode": "\n    async def start(self, url: str, token: str, *, debug: bool = False, reconnect: bool = True, timeout: int = 60,\n                    is_ayuskey: bool = False):\n        \"\"\"\n        Starting Bot"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyIncorrectDocstringInspection"
  },
  "hash": "440834f7df5a7e994d4e72b9ba163bf538be965c8e9fafe727032548af90b702"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `send` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/note.py",
      "language": "Python",
      "line": 44,
      "offset": 15,
      "length": 4,
      "code": {
        "startLine": 42,
        "length": 4,
        "offset": 122,
        "surroundingCode": "        return bool(await HTTPSession.request(Route('POST', '/api/clips/add-note'), json=data, auth=True))\n\n    async def send(self,\n                   content: Optional[str] = None,\n                   visibility: str = \"public\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "9bc3594c1e8f32851b18b5f33f442bc509f7f4033b50413f7b26fbb7a97c26ad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_follow` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/user.py",
      "language": "Python",
      "line": 146,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 144,
        "length": 10,
        "offset": 90,
        "surroundingCode": "        return f'@{user.name}@{user.host}' if user.instance else f'@{user.name}'\n\n    def get_follow(self, user_id: str) -> FollowManager:\n        return FollowManager(user_id=user_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "f566743006ffbd9685e6bf72fef4e5f1f18b4897a07034270a6540f186b989fd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_follow_request` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/user.py",
      "language": "Python",
      "line": 149,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 147,
        "length": 18,
        "offset": 55,
        "surroundingCode": "        return FollowManager(user_id=user_id)\n\n    def get_follow_request(self, user_id: str) -> FollowRequestManager:\n        return FollowRequestManager(user_id=user_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "7729c90793a9541a62e3fd8a9d596c693c119d2a561925adce66eb4811e95d8f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_folder_instance` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/drive.py",
      "language": "Python",
      "line": 29,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 27,
        "length": 19,
        "offset": 57,
        "surroundingCode": "        self.files: FileManager = FileManager()\n\n    def get_folder_instance(self, folder_id: str) -> FolderActions:\n        return FolderActions(folder_id=folder_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "0d89c4cd655705a892d1683b60d0c57788d851a5464961b6f164437425a52c29"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/note.py",
      "language": "Python",
      "line": 12,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 10,
        "length": 3,
        "offset": 48,
        "surroundingCode": "        self.__note_id = note_id\n\n    async def get(self, local: bool = True, reply: bool = False, renote: bool = True, with_files: bool = False,\n                  poll: bool = True, limit: int = 10, since_id: Optional[str] = None, until_id: Optional[str] = None):\n        data = {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "9c5e7f2c19fbe090703fa4d92b73d7984ca5d0a3e2eefe9814792519b4adbced"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `show_file` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/drive.py",
      "language": "Python",
      "line": 18,
      "offset": 15,
      "length": 9,
      "code": {
        "startLine": 16,
        "length": 9,
        "offset": 48,
        "surroundingCode": "        self.__file_id = file_id\n\n    async def show_file(self, file_id: Optional[str], url: Optional[str]) -> File:\n        \"\"\"\n        ファイルの情報を取得します。"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "38d8c9c141d4214f834e54a3de096b07bb098f28cf4ef9c45fa61c54071ca79e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_folders` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/drive.py",
      "language": "Python",
      "line": 163,
      "offset": 15,
      "length": 11,
      "code": {
        "startLine": 161,
        "length": 11,
        "offset": 28,
        "surroundingCode": "        pass\n\n    async def get_folders(self, limit: int = 100, since_id: Optional[str] = None, until_id: Optional[str] = None,\n                          folder_id: Optional[str] = None) -> List[Folder]:\n        \"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "725f8ff9566c022547bac5a3462a5dd20e8991580ce37b3504f57a906e9b6213"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_all` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/follow.py",
      "language": "Python",
      "line": 61,
      "offset": 15,
      "length": 7,
      "code": {
        "startLine": 59,
        "length": 7,
        "offset": 63,
        "surroundingCode": "        self.__user_id: Optional[str] = user_id\n\n    async def get_all(self) -> List[FollowRequest]:\n        \"\"\"\n        未承認のフォローリクエストを取得します"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "2c125fa0b7677dec4f86c80a15ce1eb08d439054a7eda38b49e8caca42fe186b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_emoji_list` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/reaction.py",
      "language": "Python",
      "line": 52,
      "offset": 15,
      "length": 14,
      "code": {
        "startLine": 50,
        "length": 14,
        "offset": 78,
        "surroundingCode": "        return [NoteReaction(RawNoteReaction(i)) for i in res]\n\n    async def get_emoji_list(self) -> List[Emoji]:\n        data = await HTTPSession.request(Route('GET', '/api/meta'), json={'detail': False}, auth=True)\n        return [Emoji(RawEmoji(i)) for i in data['emojis']]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "d974a26ea6c71e3b769dbe0629567707798e43fe483ca75eaa5a3801916e0ab0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_user_instance` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/manager.py",
      "language": "Python",
      "line": 27,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 25,
        "length": 17,
        "offset": 74,
        "surroundingCode": "        self.chart: ChartManager = ChartManager(*args, **kwargs)\n\n    def get_user_instance(self, user_id: Optional[str] = None, user: Optional[User] = None) -> UserActions:\n        return UserActions(user_id=user_id, user=user)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "01a0c5b13bf514ebcebce8d593ab7dec91afffd1c7a07e1cdd10a01da596fa21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `get_note_instance` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/manager.py",
      "language": "Python",
      "line": 30,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 28,
        "length": 17,
        "offset": 64,
        "surroundingCode": "        return UserActions(user_id=user_id, user=user)\n\n    def get_note_instance(self, note_id: str) -> NoteActions:\n        return NoteActions(note_id=note_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "31813a69e8bbafcc99f3b4f158a48df1d0d0407d8d4260ae2bd6387dbcbbaef7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `on_message` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "examples/use_class.py",
      "language": "Python",
      "line": 28,
      "offset": 15,
      "length": 10,
      "code": {
        "startLine": 26,
        "length": 10,
        "offset": 51,
        "surroundingCode": "        self.task.stop()  # タスクを止める\n\n    async def on_message(self, note: Note):\n        instance_name = note.author.instance.name if note.author.instance else 'local'\n        username = note.author.nickname or note.author.name"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "f2276c945f41dae4ba70477c0cc388866b48917c7cf6534ef500206aebaae78f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/manager.py",
      "language": "Python",
      "line": 21,
      "offset": 49,
      "length": 5,
      "code": {
        "startLine": 19,
        "length": 5,
        "offset": 172,
        "surroundingCode": "        self.note: NoteActions = NoteActions(*args, **kwargs)\n        self.chat: ChatManager = ChatManager(*args, **kwargs)\n        self.admin: AdminActions = AdminActions(*args, **kwargs)\n        self.user: UserActions = UserActions(*args, **kwargs)\n        self.drive: DriveActions = DriveActions(*args, **kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "164e77229ab2efbe7a1f52f378c059f516649d6e973bab8e913f533c4562fd2a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/manager.py",
      "language": "Python",
      "line": 21,
      "offset": 56,
      "length": 8,
      "code": {
        "startLine": 19,
        "length": 8,
        "offset": 179,
        "surroundingCode": "        self.note: NoteActions = NoteActions(*args, **kwargs)\n        self.chat: ChatManager = ChatManager(*args, **kwargs)\n        self.admin: AdminActions = AdminActions(*args, **kwargs)\n        self.user: UserActions = UserActions(*args, **kwargs)\n        self.drive: DriveActions = DriveActions(*args, **kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "3e2af0df4d07a9651c6ccfd9757ed7194ed955b45c8bd837d5cb0a03072a1061"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/manager.py",
      "language": "Python",
      "line": 23,
      "offset": 49,
      "length": 5,
      "code": {
        "startLine": 21,
        "length": 5,
        "offset": 175,
        "surroundingCode": "        self.admin: AdminActions = AdminActions(*args, **kwargs)\n        self.user: UserActions = UserActions(*args, **kwargs)\n        self.drive: DriveActions = DriveActions(*args, **kwargs)\n        self.reaction: ReactionManager = ReactionManager(*args, **kwargs)\n        self.chart: ChartManager = ChartManager(*args, **kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "b1e036b62d070b709ec156a40a5a802f4e04ad54dc2856f514938e4fc9fac0aa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/manager.py",
      "language": "Python",
      "line": 23,
      "offset": 56,
      "length": 8,
      "code": {
        "startLine": 21,
        "length": 8,
        "offset": 182,
        "surroundingCode": "        self.admin: AdminActions = AdminActions(*args, **kwargs)\n        self.user: UserActions = UserActions(*args, **kwargs)\n        self.drive: DriveActions = DriveActions(*args, **kwargs)\n        self.reaction: ReactionManager = ReactionManager(*args, **kwargs)\n        self.chart: ChartManager = ChartManager(*args, **kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "0ff8d64c104abc02720aacb04f0b29465e985562fbdcda7e9b01da5d65dfc3f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/manager.py",
      "language": "Python",
      "line": 25,
      "offset": 49,
      "length": 5,
      "code": {
        "startLine": 23,
        "length": 5,
        "offset": 187,
        "surroundingCode": "        self.drive: DriveActions = DriveActions(*args, **kwargs)\n        self.reaction: ReactionManager = ReactionManager(*args, **kwargs)\n        self.chart: ChartManager = ChartManager(*args, **kwargs)\n\n    def get_user_instance(self, user_id: Optional[str] = None, user: Optional[User] = None) -> UserActions:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "4e115fdaf91cab9679bd98a87a2dff886b62583c52c99b74bade3475e6b92c8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/manager.py",
      "language": "Python",
      "line": 25,
      "offset": 56,
      "length": 8,
      "code": {
        "startLine": 23,
        "length": 8,
        "offset": 194,
        "surroundingCode": "        self.drive: DriveActions = DriveActions(*args, **kwargs)\n        self.reaction: ReactionManager = ReactionManager(*args, **kwargs)\n        self.chart: ChartManager = ChartManager(*args, **kwargs)\n\n    def get_user_instance(self, user_id: Optional[str] = None, user: Optional[User] = None) -> UserActions:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "95b022c49d2c3b7623691362948487d5a0cb612136fb63c9731a47b21319cf67"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'kwargs' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 48,
      "offset": 53,
      "length": 8,
      "code": {
        "startLine": 46,
        "length": 8,
        "offset": 73,
        "surroundingCode": "        return self\n\n    def __init__(self, func, regex: str, text: str, **kwargs):\n        if not asyncio.iscoroutinefunction(func):\n            raise TypeError(f'{func}はコルーチンでなければなりません')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "4be600eac88f546c47992d73a18be0bbaa3795db997e23142c65b50e02adcab9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'args' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 69,
      "offset": 42,
      "length": 5,
      "code": {
        "startLine": 67,
        "length": 5,
        "offset": 61,
        "surroundingCode": "        return ctx\n\n    async def invoke(self, ctx: Context, *args, **kwargs):\n        ctx = await self._parse_arguments(ctx)\n        await self.callback(*ctx.args, **ctx.kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "fc528d37752c94870ea5a0cfbd8994b204ecfb47e6bb4b869221a762db6b5dff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'kwargs' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 69,
      "offset": 49,
      "length": 8,
      "code": {
        "startLine": 67,
        "length": 8,
        "offset": 68,
        "surroundingCode": "        return ctx\n\n    async def invoke(self, ctx: Context, *args, **kwargs):\n        ctx = await self._parse_arguments(ctx)\n        await self.callback(*ctx.args, **ctx.kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "322cc604713d309e81b3db84c573c7ee33f009e07024238096502ea446d7ce7f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'user_id' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/user.py",
      "language": "Python",
      "line": 37,
      "offset": 68,
      "length": 29,
      "code": {
        "startLine": 35,
        "length": 29,
        "offset": 130,
        "surroundingCode": "        self.chat: ChatManager = ChatManager(user_id=user_id)\n\n    def _get_chat_instance(self, message_id: Optional[str] = None, user_id: Optional[str] = None) -> ChatManager:\n        return ChatManager(user_id=self.__user.id, message_id=message_id)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "642ef745801d8d8f0c7e63f2d27b5baf41870e6ae774d0014a75156bef84eaeb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'options' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/client.py",
      "language": "Python",
      "line": 44,
      "offset": 26,
      "length": 14,
      "code": {
        "startLine": 42,
        "length": 14,
        "offset": 67,
        "surroundingCode": "        self.ws: MisskeyWebSocket = None\n\n    def _get_state(self, **options: Any) -> ConnectionState:\n        return ConnectionState(dispatch=self.dispatch, loop=self.loop, client=self)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a62de0c37fdea3e553201b63851fd340bb33d78facba0d71ae5ee32558d83433"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 64,
      "offset": 38,
      "length": 4,
      "code": {
        "startLine": 62,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n\ndef depart_attributetable_node(self, node):\n    self.body.append('</div>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c2783c30b39c7803d6b306a324dc75470ecd2c43010974e1255a541f02bd66c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 68,
      "offset": 44,
      "length": 4,
      "code": {
        "startLine": 66,
        "length": 4,
        "offset": 45,
        "surroundingCode": "\n\ndef depart_attributetablecolumn_node(self, node):\n    self.body.append('</div>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c0259b8a9d9ede31374c99ce5cde5b08e498fd8bffb7a3c6c49cf23b479e1435"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 72,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 70,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetabletitle_node(self, node):\n    self.body.append('</span>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f1ba68d3e3cf22827c0089314d3801ff5f436e64e7691ac872cd842cd9ddc9c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 76,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 74,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetablebadge_node(self, node):\n    self.body.append('</span>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8bfdbb91e0b2d3edac3af7876b27f24741b310c30acabdc5bf9968f78033810c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 80,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 78,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetable_item_node(self, node):\n    self.body.append('</li>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f75f0f54a460710801f1f0f91151b48653daa46c27bb5353ec80f6035762dde6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'fromdocname' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 170,
      "offset": 62,
      "length": 16,
      "code": {
        "startLine": 168,
        "length": 16,
        "offset": 63,
        "surroundingCode": "\n\ndef process_attributetable(app: application.Sphinx, doctree, fromdocname: str):\n    env = app.builder.env\n    lookup = build_lookup_table(env)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "26e407b636c2a5b80976ded6e8fea8a6919ebaa54eaaf350cc984b9224f26842"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'copyright'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "docs/conf.py",
      "language": "Python",
      "line": 22,
      "offset": 1,
      "length": 9,
      "code": {
        "startLine": 20,
        "length": 9,
        "offset": 19,
        "surroundingCode": "\nproject = \"Mi.py\"\ncopyright = \"2022, yupix\"\nauthor = \"yupix\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "04a775a0eb21718693be870d7a026ceaf4b91b9b177367cd4801720797609191"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 15,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 13,
        "length": 14,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetable(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "864af21adf92daee912befdfe8f40cfa477ac9bf7c187b09be85aaf18b2f8a01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 19,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 17,
        "length": 20,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetablecolumn(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "73d0b2a4abb082fe0874fde273575ff2420d4985fff7d7d9ab649c69dc5bad41"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 23,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 21,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetabletitle(nodes.TextElement):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "073e0b2a7f7627abb0424f2a5bd62947f3ae3c6f744626b99321a86ae796cc1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 27,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 25,
        "length": 25,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetableplaceholder(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2c6dd13b6676bf62a49ec1f5bc57bc44c5b0edf019532032837c286bc69ea817"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 31,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 29,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetablebadge(nodes.TextElement):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7bb23b02ec5ff0f3d57b5e25ca91326a0f4e262100664c05154fd27b8276f6a5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 35,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 33,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetable_item(nodes.Part, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "acdd07f0f692222f4a4e65e7f56ebb34d1462eb9a94d73321ed345a55e6fb59c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 219,
      "offset": 16,
      "length": 9,
      "code": {
        "startLine": 217,
        "length": 9,
        "offset": 71,
        "surroundingCode": "        except asyncio.CancelledError:\n            pass\n        except Exception:\n            try:\n                await self.__on_error(event_name)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "9c5e9247fbe8e2b304bc9c93583a6461a5a6392215906b679d3bc39514860c8d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/client.py",
      "language": "Python",
      "line": 150,
      "offset": 16,
      "length": 9,
      "code": {
        "startLine": 148,
        "length": 9,
        "offset": 71,
        "surroundingCode": "        except asyncio.CancelledError:\n            pass\n        except Exception:\n            try:\n                await self.__on_error(event_name)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "d8a9b36297657a9fcef0344a1bffce1592d4429ac38cc56462846005aeb31639"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _inject of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 143,
      "offset": 15,
      "length": 11,
      "code": {
        "startLine": 141,
        "length": 11,
        "offset": 65,
        "surroundingCode": "            self.remove_cog(cog_name)  # TODO: 作る\n\n        cog = cog._inject(self)\n        self.__cogs[cog_name] = cog\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "2db4a0d357ab2acd600dad685d9c3ea9c224a08ce489316b551ad1d4a928e778"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _eject of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 152,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 150,
        "length": 10,
        "offset": 28,
        "surroundingCode": "            return\n\n        cog._eject(self)\n\n        return cog"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "4abb1ef0d42865dcd074a9983c83e9b540c3e39e4220e2b76352a724aef5499c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "'EmojiPayload' is not declared in __all__",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/instance.py",
      "language": "Python",
      "line": 6,
      "offset": 26,
      "length": 12,
      "code": {
        "startLine": 4,
        "length": 12,
        "offset": 44,
        "surroundingCode": "\nif TYPE_CHECKING:\n    from mi.types import EmojiPayload\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "522e231c3e3eda9b7724ab3793a8b357740aa34b6eca70d71d7396a66ce63051"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "'UserPayload' is not declared in __all__",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/reaction.py",
      "language": "Python",
      "line": 3,
      "offset": 22,
      "length": 11,
      "code": {
        "startLine": 1,
        "length": 11,
        "offset": 51,
        "surroundingCode": "from typing import TypedDict\n\nfrom mi.types import UserPayload\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "bed241716f85950c5f1eb27b7f248f4d3093d712496492ac29cbd830413a2199"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "'InstancePayload' is not declared in __all__",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/instance.py",
      "language": "Python",
      "line": 5,
      "offset": 22,
      "length": 15,
      "code": {
        "startLine": 3,
        "length": 15,
        "offset": 48,
        "surroundingCode": "__all__ = ['RawInstance']\n\nfrom mi.types import InstancePayload\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "5155672e4c3f78275c0804f318cf247e47e1041d521e268955da32ee446f304f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "'UserPayload' is not declared in __all__",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/reaction.py",
      "language": "Python",
      "line": 3,
      "offset": 22,
      "length": 11,
      "code": {
        "startLine": 1,
        "length": 11,
        "offset": 52,
        "surroundingCode": "from datetime import datetime\n\nfrom mi.types import UserPayload\nfrom mi.types.reaction import NoteReactionPayload\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "49e1d02c4983f2d68e6ebf308c4eb75c5634eeb6a19c5cf6bd575028a04d228e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "'RawInstance' is not declared in __all__",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/instance.py",
      "language": "Python",
      "line": 8,
      "offset": 31,
      "length": 11,
      "code": {
        "startLine": 6,
        "length": 11,
        "offset": 141,
        "surroundingCode": "from mi.framework.models.emoji import Emoji\nfrom mi.types.instance import (MetaPayload as InstanceMetaPayload)\nfrom mi.wrapper.models import RawInstance\nfrom mi.wrapper.models.emoji import RawEmoji\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "7819396b210b14436c0446ac9b1a5d26c1e90bb63cdbfca11f9f52446d050702"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "'NotePayload' is not declared in __all__",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/state.py",
      "language": "Python",
      "line": 18,
      "offset": 26,
      "length": 11,
      "code": {
        "startLine": 16,
        "length": 11,
        "offset": 86,
        "surroundingCode": "if TYPE_CHECKING:\n    from mi.framework.client import Client\n    from mi.types import NotePayload, ChatPayload\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "757baa89e095a86a37828ccc5336bdc56eed7a7850b280f25cf9bd29cf4e1b9b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "'ChatPayload' is not declared in __all__",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/state.py",
      "language": "Python",
      "line": 18,
      "offset": 39,
      "length": 11,
      "code": {
        "startLine": 16,
        "length": 11,
        "offset": 99,
        "surroundingCode": "if TYPE_CHECKING:\n    from mi.framework.client import Client\n    from mi.types import NotePayload, ChatPayload\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "0021f1ff8fe9c5fbd82ebb56726698e1b3ea521d547c1517c320575a93d81dd5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _on_message of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/state.py",
      "language": "Python",
      "line": 188,
      "offset": 9,
      "length": 23,
      "code": {
        "startLine": 186,
        "length": 23,
        "offset": 124,
        "surroundingCode": "        note = Note(RawNote(message))\n        # Router(self.http.ws).capture_message(note.id) TODO: capture message\n        self.client._on_message(note)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "8be058b2f449a05e0c2a6077bb29b62c0f63f6ca872efbc1cf3187071749ef51"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _connection of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/gateway.py",
      "language": "Python",
      "line": 37,
      "offset": 26,
      "length": 18,
      "code": {
        "startLine": 35,
        "length": 18,
        "offset": 89,
        "surroundingCode": "        ws = cls(socket)\n        ws._dispatch = client.dispatch\n        ws._connection = client._connection\n        ws._misskey_parsers = client._connection.parsers\n        client.dispatch('ready', socket)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "2eb18e1799ab06d027b49414c3a53ee776ce5e758ec8cbe647eeb3866487e35c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _connection of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/gateway.py",
      "language": "Python",
      "line": 38,
      "offset": 31,
      "length": 18,
      "code": {
        "startLine": 36,
        "length": 18,
        "offset": 113,
        "surroundingCode": "        ws._dispatch = client.dispatch\n        ws._connection = client._connection\n        ws._misskey_parsers = client._connection.parsers\n        client.dispatch('ready', socket)\n        await ws.poll_event(timeout=timeout)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "7343a65e88de8d13a499e7fdd0a7dcc5c94d48300100811dbe229510a7ca3eb5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _ of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 11,
      "offset": 27,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 94,
        "surroundingCode": "from docutils import nodes\nfrom sphinx import addnodes, application\nfrom sphinx.locale import _\nfrom sphinx.util.docutils import SphinxDirective\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "506378a3f289ce1cd91921b47d91df63e0b2ce0a3fd0bc7a74c2b53bb19a6619"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/note.py",
      "language": "Python",
      "line": 238,
      "offset": 118,
      "length": 4,
      "code": {
        "startLine": 236,
        "length": 4,
        "offset": 173,
        "surroundingCode": "        \"\"\"\n        note_id = note_id or self.__note_id\n        res = await HTTPSession.request(Route('POST', '/api/notes/show'), json={\"noteId\": note_id}, auth=True, lower=True)\n        return Note(RawNote(res))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "14923b1d82b6458a60d446cab4ac826c3cc3a5243e1d731d4d16b22345a5e9de"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/note.py",
      "language": "Python",
      "line": 269,
      "offset": 117,
      "length": 5,
      "code": {
        "startLine": 267,
        "length": 5,
        "offset": 237,
        "surroundingCode": "        note_id = note_id or self.__note_id\n        res = await HTTPSession.request(Route('POST', '/api/notes/replies'),\n                                        json={\"noteId\": note_id, \"sinceId\": since_id, \"untilId\": until_id, \"limit\": limit},\n                                        auth=True, lower=True)\n        return [Note(RawNote(i)) for i in res]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "d9024d02b4e2bf008f63ea43f9aeede395243760cea84aea20ac12207c20a7d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/actions/user.py",
      "language": "Python",
      "line": 41,
      "offset": 119,
      "length": 4,
      "code": {
        "startLine": 39,
        "length": 4,
        "offset": 186,
        "surroundingCode": "\n    @cached(ttl=10, namespace='get_user', key_builder=key_builder)\n    async def get(self, user_id: Optional[str] = None, username: Optional[str] = None, host: Optional[str] = None) -> User:\n        \"\"\"\n        ユーザーのプロフィールを取得します。一度のみサーバーにアクセスしキャッシュをその後は使います。"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e036d29d3d8adb84699f7def0e6a970b39cb3de86ed94ff60b607ecfbdc7a464"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/note.py",
      "language": "Python",
      "line": 121,
      "offset": 107,
      "length": 15,
      "code": {
        "startLine": 119,
        "length": 15,
        "offset": 125,
        "surroundingCode": "\n    __slots__ = (\n        'id', 'created_at', 'user_id', 'author', 'content', 'cw', 'renote', 'visibility', 'renote_count', 'replies_count',\n        'reactions', 'emojis', 'file_ids', 'files', 'reply_id', 'renote_id', 'uri', 'poll', 'visible_user_ids',\n        'via_mobile', 'local_only', 'extract_mentions', 'extract_hashtags', 'extract_emojis', 'preview', 'media_ids',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1b04fa02cd3b8658ee631bbd155289fa089ab91ab53b0be4601c6b6bd5f2a635"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/user.py",
      "language": "Python",
      "line": 92,
      "offset": 116,
      "length": 8,
      "code": {
        "startLine": 90,
        "length": 8,
        "offset": 134,
        "surroundingCode": "\n    __slots__ = (\n        'id', 'name', 'nickname', 'host', 'avatar_url', 'is_admin', 'is_moderator', 'is_bot', 'is_cat', 'is_lady', 'emojis',\n        'online_status', 'url', 'uri', 'created_at', 'updated_at', 'is_locked', 'is_silenced', 'is_suspended', 'description',\n        'location', 'birthday', 'fields', 'followers_count', 'following_count', 'notes_count', 'pinned_note_ids',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "fdfcc407a3f355dbccdfb335d8d8210577cec477fa35408559dc6cc7f9bd9d69"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/user.py",
      "language": "Python",
      "line": 93,
      "offset": 112,
      "length": 13,
      "code": {
        "startLine": 91,
        "length": 13,
        "offset": 254,
        "surroundingCode": "    __slots__ = (\n        'id', 'name', 'nickname', 'host', 'avatar_url', 'is_admin', 'is_moderator', 'is_bot', 'is_cat', 'is_lady', 'emojis',\n        'online_status', 'url', 'uri', 'created_at', 'updated_at', 'is_locked', 'is_silenced', 'is_suspended', 'description',\n        'location', 'birthday', 'fields', 'followers_count', 'following_count', 'notes_count', 'pinned_note_ids',\n        'pinned_notes', 'pinned_page_id', 'pinned_page', 'ff_visibility', 'is_following', 'is_follow', 'is_blocking',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1dd6ede0ba752aa142255549d54cd9cc94a6f695ea092aeb616570ce6cde318f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/user.py",
      "language": "Python",
      "line": 114,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 112,
        "length": 1,
        "offset": 220,
        "surroundingCode": "        self.url: Optional[str] = data.get(\"url\")\n        self.uri: Optional[str] = data.get(\"uri\")\n        self.created_at: Optional[datetime] = datetime.strptime(data[\"created_at\"], '%Y-%m-%dT%H:%M:%S.%fZ') if data.get(\n            \"created_at\") \\\n            else None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "5b8ad275bb70dd7723b33bdb129ce80fbaf01d9124aa970518ac1faa2f29be49"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E231 missing whitespace after ','",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/chart.py",
      "language": "Python",
      "line": 1,
      "offset": 78,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 77,
        "surroundingCode": "__all__ = ('RawActiveUsersChart', 'RawDriveRemoteChart', 'RawDriveLocalChart','RawDriveChart')\n\nfrom typing import List"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "078ca2c5e22eb8dc30dc248749054917c34bfff8fb2448e14839a7c53dad6b76"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/drive.py",
      "language": "Python",
      "line": 96,
      "offset": 109,
      "length": 15,
      "code": {
        "startLine": 94,
        "length": 15,
        "offset": 127,
        "surroundingCode": "\n    __slots__ = (\n        'id', 'created_at', 'name', 'type', 'md5', 'size', 'is_sensitive', 'blurhash', 'properties', 'url', 'thumbnail_url',\n        'comment', 'folder_id', 'folder', 'user_id', 'user'\n    )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "5fb03d62b4b19aeb259114d49257535bc036011043113f7acbb9541b9ae0a330"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/models/drive.py",
      "language": "Python",
      "line": 109,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 107,
        "length": 1,
        "offset": 221,
        "surroundingCode": "        self.is_sensitive: bool = data['is_sensitive']\n        self.blurhash: str = data['blurhash']\n        self.properties: Optional[RawProperties] = RawProperties(data['properties']) if len(data.get('properties')) else None\n        self.url: str = data['url']\n        self.thumbnail_url: str = data['thumbnail_url']"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "d52cd8dd5e7ef787679a864a6fea558b5dd7988d4dc46983be6f158b245cdad0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/chat.py",
      "language": "Python",
      "line": 39,
      "offset": 118,
      "length": 4,
      "code": {
        "startLine": 37,
        "length": 4,
        "offset": 250,
        "surroundingCode": "        user_id = user_id or self.__user_id\n        data = {'userId': user_id, 'groupId': group_id, 'text': text, 'fileId': file_id}\n        res = await HTTPSession.request(Route('POST', '/api/messaging/messages/create'), json=data, auth=True, lower=True)\n        return Chat(RawChat(res))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "256b3a2d1cd1f0bb637e2e05d6bc596f59f7f8ce9cc055ec76c9dff9d864eb70"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/drive.py",
      "language": "Python",
      "line": 55,
      "offset": 120,
      "length": 4,
      "code": {
        "startLine": 53,
        "length": 4,
        "offset": 164,
        "surroundingCode": "\n        file_id = file_id or self.__file_id\n        return bool(await HTTPSession.request(Route('POST', '/api/drive/files/delete'), json={'fileId': file_id}, auth=True))\n\n    @staticmethod"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "82f094805728408001a5f26902ea3a67adbaca1304cce677f3103d764a6a4b47"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/drive.py",
      "language": "Python",
      "line": 113,
      "offset": 119,
      "length": 4,
      "code": {
        "startLine": 111,
        "length": 4,
        "offset": 173,
        "surroundingCode": "\n        data = {'name': name, 'parent_id': parent_id}\n        return bool(await HTTPSession.request(Route('POST', '/api/drive/folders/create'), json=data, lower=True, auth=True))\n\n    async def delete(self, folder_id: Optional[str] = None) -> bool:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ccea9b0c131f1314da4b0a8bf9df76ff0d658f1573a66be0cea56aeab9005aeb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/drive.py",
      "language": "Python",
      "line": 130,
      "offset": 119,
      "length": 4,
      "code": {
        "startLine": 128,
        "length": 4,
        "offset": 207,
        "surroundingCode": "        folder_id = folder_id or self.__folder_id\n        data = {'folderId': folder_id}\n        return bool(await HTTPSession.request(Route('POST', '/api/drive/folders/delete'), json=data, lower=True, auth=True))\n\n    async def get_files(self, limit: int = 10, since_id: Optional[str] = None, until_id: Optional[str] = None,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7ab578cf33203ea189eca86cc37bf70a15771e6455e72936940b328ae672a264"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/emoji.py",
      "language": "Python",
      "line": 39,
      "offset": 118,
      "length": 4,
      "code": {
        "startLine": 37,
        "length": 4,
        "offset": 171,
        "surroundingCode": "            raise NotExistRequiredData('idが不足しています')\n\n        return bool(await HTTPSession.request(Route('POST', '/api/admin/emoji/remove'), json={'id': emoji_id}, lower=True,\n                                              auth=True))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "84495547bc09b75b1c29f569e94a146aa7d00c607f6e6344215c0a4880480819"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/wrapper/reaction.py",
      "language": "Python",
      "line": 46,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 44,
        "length": 1,
        "offset": 180,
        "surroundingCode": "                                              lower=True))\n\n    async def get_reaction(self, reaction: str, note_id: Optional[str] = None, *, limit: int = 11) -> List[NoteReaction]:\n        note_id = note_id or self.__note_id\n        data = remove_dict_empty({\"noteId\": note_id, 'limit': limit, 'type': reaction})"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "4a7eeb7e09e6953b3e3f49625b127ebc4678ec3504d9e974d0c7896f4c8a143a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/note.py",
      "language": "Python",
      "line": 27,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 25,
        "length": 1,
        "offset": 198,
        "surroundingCode": "    def __init__(self, data):\n        self.id: Optional[str] = data.get('id')\n        self.created_at: Optional[datetime] = datetime.strptime(data[\"created_at\"], '%Y-%m-%dT%H:%M:%S.%fZ') if data.get(\n            \"created_at\") else None\n        self.type: Optional[str] = data.get('type')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "20ea684fffe6043dfd128d6487998a6cd7fd24d856746f8ae60b31fd235c6dbb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/user.py",
      "language": "Python",
      "line": 55,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 53,
        "length": 1,
        "offset": 214,
        "surroundingCode": "    def __init__(self, data: ChannelPayload):\n        self.id: Optional[str] = data.get(\"id\")\n        self.created_at: Optional[datetime] = datetime.strptime(data[\"created_at\"], '%Y-%m-%dT%H:%M:%S.%fZ') if data.get(\n            \"created_at\") else None\n        self.last_noted_at: Optional[str] = data.get(\"last_noted_at\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "ae8a33c6298db74d315128d499df653a011c7fca1df2e307b87ca0587a56cab0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/user.py",
      "language": "Python",
      "line": 70,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 68,
        "length": 1,
        "offset": 217,
        "surroundingCode": "    def __init__(self, data: PinnedNotePayload):\n        self.id: Optional[str] = data.get(\"id\")\n        self.created_at: Optional[datetime] = datetime.strptime(data[\"created_at\"], '%Y-%m-%dT%H:%M:%S.%fZ') if data.get(\n            \"created_at\") else None\n        self.text: Optional[str] = data.get(\"text\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "9f8418493cb9d824a31e3a3f36a683c1a2f8a5f8621ab51f1d1facc13b82f2c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/user.py",
      "language": "Python",
      "line": 102,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 100,
        "length": 1,
        "offset": 217,
        "surroundingCode": "    def __init__(self, data: PinnedPagePayload):\n        self.id: Optional[str] = data.get(\"id\")\n        self.created_at: Optional[datetime] = datetime.strptime(data[\"created_at\"], '%Y-%m-%dT%H:%M:%S.%fZ') if data.get(\n            \"created_at\") else None\n        self.updated_at: Optional[str] = data.get(\"updated_at\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "bba43dd48f919013ef9a4e253645684951cb149dd68d3e3de070fc2f086378bb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E128 continuation line under-indented for visual indent",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/user.py",
      "language": "Python",
      "line": 287,
      "offset": 44,
      "length": 4,
      "code": {
        "startLine": 285,
        "length": 4,
        "offset": 158,
        "surroundingCode": "        \"\"\"\n        return await self.__client.get_user(user_id=self.__raw_user.id, username=self.__raw_user.name,\n                                           host=self.__raw_user.host)\n\n    def get_followers(self, until_id: Optional[str] = None, limit: int = 10, get_all: bool = False) -> AsyncIterator[Followee]:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "97c4f83bdfcc39bf3786727074999e9f48a607523d35b9447d900e2a9afe475a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (127 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/user.py",
      "language": "Python",
      "line": 289,
      "offset": 118,
      "length": 8,
      "code": {
        "startLine": 287,
        "length": 8,
        "offset": 188,
        "surroundingCode": "                                           host=self.__raw_user.host)\n\n    def get_followers(self, until_id: Optional[str] = None, limit: int = 10, get_all: bool = False) -> AsyncIterator[Followee]:\n        \"\"\"\n        ユーザーのフォロワー一覧を取得します"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "a03109cb98046dd531414e583df6b1046ee1e200b64a36534c24137934362b34"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/models/instance.py",
      "language": "Python",
      "line": 126,
      "offset": 116,
      "length": 8,
      "code": {
        "startLine": 124,
        "length": 8,
        "offset": 155,
        "surroundingCode": "        AsyncIterator[User]\n        \"\"\"\n        return self.__client.get_users(limit=limit, offset=offset, sort=sort, state=state, origin=origin, username=username,\n                                       hostname=hostname, get_all=get_all)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6787f0315ef95ca901e54a506d9075e89a4bfab6cc9e75ffe72a0fd5183f43fa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E261 at least two spaces before inline comment",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/state.py",
      "language": "Python",
      "line": 120,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 118,
        "length": 1,
        "offset": 87,
        "surroundingCode": "\n    def parse_url_upload_finished(self, message: Dict[str, Any]) -> None:\n        pass # TODO:実装\n\n    def parse_unread_mention(self, message: Dict[str, Any]) -> None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6e94d2e16b4b4d6b3c240c109b2c4d06f266a8bb5014cb38c0337f01d395384f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/client.py",
      "language": "Python",
      "line": 186,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 184,
        "length": 1,
        "offset": 182,
        "surroundingCode": "            until_data: int = 0\n    ) -> AsyncIterator[Note]:\n        return self._connection.get_user_notes(user_id=user_id, since_id=since_id, include_my_renotes=include_my_renotes,\n                                               include_replies=include_replies, with_files=with_files,\n                                               until_id=until_id, limit=limit, get_all=get_all, exclude_nsfw=exclude_nsfw,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "767857b224a7d1f9d840a8a53f0701414c34d4d5cf7ec49dea6d54c8e06f6ff7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/client.py",
      "language": "Python",
      "line": 188,
      "offset": 110,
      "length": 12,
      "code": {
        "startLine": 186,
        "length": 12,
        "offset": 334,
        "surroundingCode": "        return self._connection.get_user_notes(user_id=user_id, since_id=since_id, include_my_renotes=include_my_renotes,\n                                               include_replies=include_replies, with_files=with_files,\n                                               until_id=until_id, limit=limit, get_all=get_all, exclude_nsfw=exclude_nsfw,\n                                               file_type=file_type, since_date=since_date, until_data=until_data)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2eda4f0384f316d43b9929bf4474607a078ffc34738fcaa39e51ca5f44c12ae0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E131 continuation line unaligned for hanging indent",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/client.py",
      "language": "Python",
      "line": 292,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 290,
        "length": 1,
        "offset": 84,
        "surroundingCode": "            origin_uri = (\n                _origin_uri.group(0)\n                    .replace(\"wss\", \"https\")\n                    .replace(\"ws\", \"http\")\n                    .replace(\"/streaming\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "dd2b0cf754bbbba4bffac2fbbe197a0d0aecea319e1bd6513cf6851092a4505a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (126 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/iterators.py",
      "language": "Python",
      "line": 61,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 59,
        "length": 1,
        "offset": 222,
        "surroundingCode": "                    yield User(RawUser(i))\n                args['offset'] = args['offset'] + len(res)\n                res = await self._state.http.request(Route('POST', '/api/admin/show-users'), json=args, auth=True, lower=True)\n                if len(res) == 0:\n                    break"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "06ca8c54586ddbff5095d011face2f73d655f05897eca4ee732d2e0477c17589"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 205,
      "offset": 5,
      "length": 20,
      "code": {
        "startLine": 203,
        "length": 20,
        "offset": 6,
        "surroundingCode": "\n\n    for attr in members:\n        attrlookup = f'{fullname}.{attr}'\n        key = _('Attributes')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "376ef05a87c14fc7fade3033bdd5cdb8c56b2260a906a49d017cc4cc3725235b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 47,
      "offset": 27,
      "length": 4,
      "code": {
        "startLine": 45,
        "length": 4,
        "offset": 119,
        "surroundingCode": "        self.origin_uri: Optional[str] = None\n        self.__extensions: Dict[str, Any] = {}\n        self.user: User = None\n        self.__cogs: Dict[str, Cog] = {}\n        self.strip_after_prefix = options.get(\"strip_after_prefix\", False)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "644633ca42f50afeaf291d9595df8cc8148d3f559aae42a2bfdf75c90a715e5e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'Bot', got 'BotBase' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 143,
      "offset": 27,
      "length": 4,
      "code": {
        "startLine": 141,
        "length": 4,
        "offset": 77,
        "surroundingCode": "            self.remove_cog(cog_name)  # TODO: 作る\n\n        cog = cog._inject(self)\n        self.__cogs[cog_name] = cog\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "9381a3f8dc4e2e72eefb4f9b88eaa976200af97b02474126faec6fa95fa4e6fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'str', got 'tuple\\[Any\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 23,
      "offset": 40,
      "length": 4,
      "code": {
        "startLine": 21,
        "length": 4,
        "offset": 168,
        "surroundingCode": "        commands = {}\n        no_bot_cog = \"Commands or listeners must not start with cog_ or bot_ (in method {0.__name__}.{1})\"\n        new_cls = super().__new__(cls, name, bases, attrs, **kwargs)\n\n        for base in reversed(new_cls.__mro__):  # 多重継承を確認 !コマンドを登録"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "5b9198167d3b5c67baaef4914333096debad578e84d8d4842773781b54195460"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'dict\\[str, Any\\]', got 'tuple\\[Any\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 23,
      "offset": 53,
      "length": 5,
      "code": {
        "startLine": 21,
        "length": 5,
        "offset": 181,
        "surroundingCode": "        commands = {}\n        no_bot_cog = \"Commands or listeners must not start with cog_ or bot_ (in method {0.__name__}.{1})\"\n        new_cls = super().__new__(cls, name, bases, attrs, **kwargs)\n\n        for base in reversed(new_cls.__mro__):  # 多重継承を確認 !コマンドを登録"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "c7cdf6c1d9169f2191aabb2bcdce91dcd245c14588d3d2be42087f8b10689d01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'Iterable\\[str\\]', got 'list\\[None\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/utils.py",
      "language": "Python",
      "line": 244,
      "offset": 31,
      "length": 6,
      "code": {
        "startLine": 242,
        "length": 6,
        "offset": 128,
        "surroundingCode": "        result[::2] = pattern.split(attr)\n        result[1::2] = [\"_\" + i.lower() for i in large]\n        default_key = \"\".join(result)\n        if replace_list.get(attr):\n            default_key = default_key.replace(attr, replace_list.get(attr))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "20ce8274dad0db4f026e01bf6b53897deac2c0ec181fa685d4c32f98d36b537d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'Iterable\\[str\\]', got 'list\\[None\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/utils.py",
      "language": "Python",
      "line": 259,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 257,
        "length": 6,
        "offset": 109,
        "surroundingCode": "    result[::2] = pattern.split(text)\n    result[1::2] = [\"_\" + i.lower() for i in large]\n    return \"\".join(result)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "f9b18b0db7d1682e78c7a696115ea54cf7223ce9f425fd3ad71a0e2dcb02200f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'RawReaction', got 'dict\\[str, Any\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/state.py",
      "language": "Python",
      "line": 180,
      "offset": 44,
      "length": 7,
      "code": {
        "startLine": 178,
        "length": 7,
        "offset": 83,
        "surroundingCode": "        リアクションに関する情報を解析する関数\n        \"\"\"\n        self.dispatch('reaction', Reaction(message))\n\n    def parse_note(self, message: NotePayload) -> None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "a06ca1974a6561a2d09c260e86e9bd1703a770798f78f3ed67164dd9678d00ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/client.py",
      "language": "Python",
      "line": 40,
      "offset": 27,
      "length": 4,
      "code": {
        "startLine": 38,
        "length": 4,
        "offset": 147,
        "surroundingCode": "        self.http = mi.framework.http.HTTPSession\n        self._connection: ConnectionState = self._get_state(**options)\n        self.user: User = None\n        self.logger = get_module_logger(__name__)\n        self.ws: MisskeyWebSocket = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "3618d89e204effa43dbb51a4a1bbbd3889bc9360228aaedd95121c2b84367d06"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'MisskeyWebSocket', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/client.py",
      "language": "Python",
      "line": 42,
      "offset": 37,
      "length": 4,
      "code": {
        "startLine": 40,
        "length": 4,
        "offset": 117,
        "surroundingCode": "        self.user: User = None\n        self.logger = get_module_logger(__name__)\n        self.ws: MisskeyWebSocket = None\n\n    def _get_state(self, **options: Any) -> ConnectionState:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "e3861c36ea7de1302f0a0f6865eb62c3c6b39818dde63555c804efb25d7e24e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'int \\| slice', got 'str' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/framework/gateway.py",
      "language": "Python",
      "line": 47,
      "offset": 45,
      "length": 6,
      "code": {
        "startLine": 45,
        "length": 6,
        "offset": 76,
        "surroundingCode": "            msg = msg.decode()\n\n        self._misskey_parsers[str_lower(msg['type']).upper()](msg)\n\n    async def poll_event(self, *, timeout: int = 60):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "3001c4c90899b17dcb4d94c14b51d2b24d34080940e8f760b2ccc83237d248f8"
}]}